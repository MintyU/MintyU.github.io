{"componentChunkName":"component---src-templates-post-tsx","path":"/cpp08.md/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"반복문iteration-statements\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8iteration-statements\" aria-label=\"반복문iteration statements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복문(Iteration Statements)</h2>\n<p>반복문이란 프로그램 내에서 똑같은 명령을 일정 횟수만큼 반복하여 수행하도록 제어하는 명령문입니다.</p>\n<p>프로그램이 처리하는 대부분의 코드는 반복적인 형태가 많으므로, 가장 많이 사용되는 제어문 중 하나입니다.</p>\n<p>C++에서 사용되는 대표적인 반복문의 형태는 다음과 같습니다.</p>\n<ol>\n<li>while 문</li>\n<li>do / while 문</li>\n<li>for 문</li>\n<li>범위 기반의 for 문</li>\n</ol>\n<h3 id=\"while-문\" style=\"position:relative;\"><a href=\"#while-%EB%AC%B8\" aria-label=\"while 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>while 문</h3>\n<p>while 문은 특정 조건을 만족하는 한 계속해서 주어진 명령문을 반복 실행합니다.</p>\n<p>C++에서 while 문의 문법은 다음과 같습니다.</p>\n<blockquote>\n<p>문법</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n\n    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<h3 id=\"do--while-문\" style=\"position:relative;\"><a href=\"#do--while-%EB%AC%B8\" aria-label=\"do  while 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>do / while 문</h3>\n<p>while 문은 루프에 진입하기 전에 먼저 조건식부터 검사합니다.</p>\n<p>하지만 do / while 문은 먼저 루프를 한 번 실행한 후에 조건식을 검사합니다.</p>\n<p>즉, do / while 문은 조건식의 결과와 상관없이 무조건 한 번은 루프를 실행합니다.</p>\n<p>C++에서 do / while 문의 문법은 다음과 같습니다.</p>\n<blockquote>\n<p>문법</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\n    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</blockquote>\n<h3 id=\"for-문\" style=\"position:relative;\"><a href=\"#for-%EB%AC%B8\" aria-label=\"for 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for 문</h3>\n<p>while 문은 우선 조건식이 참(true)인지를 판단하여, 참이면 내부의 명령문을 실행합니다.</p>\n<p>내부의 명령문을 전부 실행하고 나면, 다시 조건식으로 돌아와 또 한 번 참인지를 판단하게 됩니다.</p>\n<p>for 문은 while 문과는 달리 자체적으로 초기식, 조건식, 증감식을 모두 포함하고 있는 반복문입니다.</p>\n<p>따라서 while 문보다는 좀 더 간결하게 반복문을 표현할 수 있습니다.</p>\n<p>C++에서 for 문의 문법은 다음과 같습니다.</p>\n<blockquote>\n<p>문법</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>초기식<span class=\"token punctuation\">;</span> 조건식<span class=\"token punctuation\">;</span> 증감식<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n\n    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<h3 id=\"범위-기반의-for-문\" style=\"position:relative;\"><a href=\"#%EB%B2%94%EC%9C%84-%EA%B8%B0%EB%B0%98%EC%9D%98-for-%EB%AC%B8\" aria-label=\"범위 기반의 for 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>범위 기반의 for 문</h3>\n<p>C++11부터는 범위 기반의 for 문이라는 새로운 형태의 반복문이 추가되었습니다.</p>\n<p>범위 기반의 for 문은 표현식 안에 포함되어 있는 모든 값에 대해 한 번씩 루프를 실행해 줍니다.</p>\n<p>이러한 범위 기반의 for 문은 배열을 자동으로 인식하며, 컨테이너 클래스에서 많이 사용됩니다.</p>\n<p>다음 예제는 범위 기반의 for 문을 사용하여 배열의 모든 값을 출력하는 예제입니다.</p>\n<blockquote>\n<p>예제</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n \n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> element <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> element <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1 3 5 7 9</span></code></pre></div>\n</blockquote>\n<h2 id=\"루프-제어\" style=\"position:relative;\"><a href=\"#%EB%A3%A8%ED%94%84-%EC%A0%9C%EC%96%B4\" aria-label=\"루프 제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>루프 제어</h2>\n<p>일반적으로 조건식의 검사를 통해 루프로 진입하면, 다음 조건식을 검사하기 전까지 루프 안에 있는 모든 명령문을 실행합니다.</p>\n<p>하지만 continue 문과 break 문은 이러한 일반적인 루프의 흐름을 사용자가 직접 제어할 수 있도록 도와줍니다.</p>\n<h3 id=\"continue-문\" style=\"position:relative;\"><a href=\"#continue-%EB%AC%B8\" aria-label=\"continue 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>continue 문</h3>\n<p>continue 문은 루프 내에서 사용하여 해당 루프의 나머지 부분을 건너뛰고, 바로 다음 조건식의 판단으로 넘어가게 해줍니다.</p>\n<p>보통 반복문 내에서 특정 조건에 대한 예외 처리를 하고자 할 때 자주 사용됩니다.</p>\n<p>다음 예제는 1부터 100까지의 정수 중에서 짝수를 제외하고 홀수만을 출력하는 예제입니다.</p>\n<blockquote>\n<p>예제</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> except_num <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n \n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> except_num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1 3 5 7 9 ... 97 99</span></code></pre></div>\n</blockquote>\n<h3 id=\"break-문\" style=\"position:relative;\"><a href=\"#break-%EB%AC%B8\" aria-label=\"break 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>break 문</h3>\n<p>break 문은 루프 내에서 사용하여 해당 반복문을 완전히 종료시킨 뒤, 반복문 바로 다음에 위치한 명령문을 실행합니다.</p>\n<p>즉 루프 내에서 조건식의 판단 결과와 상관없이 반복문을 완전히 빠져나가고 싶을 때 사용합니다.</p>\n<p>다음 예제는 1부터 사용자가 입력한 정수까지의 합을 구하는 예제입니다.</p>\n<blockquote>\n<p>예제</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> end_num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n \n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 무한 루프</span>\n\n<span class=\"token punctuation\">{</span>\n\n    sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> end_num<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1부터 \"</span> <span class=\"token operator\">&lt;&lt;</span> end_num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"까지 더한 값은 \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"입니다.\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//1부터 10까지 더한 값은 55입니다.</span></code></pre></div>\n</blockquote>","excerpt":"반복문(Iteration Statements…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/cpp08.md/#%EB%B0%98%EB%B3%B5%EB%AC%B8iteration-statements\">반복문(Iteration Statements)</a></p>\n<ul>\n<li><a href=\"/cpp08.md/#while-%EB%AC%B8\">while 문</a></li>\n<li><a href=\"/cpp08.md/#do--while-%EB%AC%B8\">do / while 문</a></li>\n<li><a href=\"/cpp08.md/#for-%EB%AC%B8\">for 문</a></li>\n<li><a href=\"/cpp08.md/#%EB%B2%94%EC%9C%84-%EA%B8%B0%EB%B0%98%EC%9D%98-for-%EB%AC%B8\">범위 기반의 for 문</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cpp08.md/#%EB%A3%A8%ED%94%84-%EC%A0%9C%EC%96%B4\">루프 제어</a></p>\n<ul>\n<li><a href=\"/cpp08.md/#continue-%EB%AC%B8\">continue 문</a></li>\n<li><a href=\"/cpp08.md/#break-%EB%AC%B8\">break 문</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/cpp08.md/"},"frontmatter":{"title":"바닥에서 시작하는 C++ (8) - 반복문","date":"Mar 05, 2020","tags":["C++"],"keywords":["C++","C","Object-Oriented Programming","객체지향 프로그래밍","반복문","iteration statements","while","for","continue","break"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/cpp08.md/","series":[],"lastmod":"0001-01-01"}}}