{"componentChunkName":"component---src-templates-post-tsx","path":"/cpp11/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"c의-문자열\" style=\"position:relative;\"><a href=\"#c%EC%9D%98-%EB%AC%B8%EC%9E%90%EC%97%B4\" aria-label=\"c의 문자열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++의 문자열?</h2>\n<p>C++은 문자열을 쉽게 다룰 수 있는 String Class를 제공합니다.</p>\n<p>C++에서 String Class를 사용하기 위해서는 String 헤더 파일을 포함해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></code></pre></div>\n<p>또한, String Class는 std namespace에 속해 있으므로 <code class=\"language-text\">using namespace std;</code>를 사용하거나 직접 <code class=\"language-text\">std::string</code>을 통해 사용해야 합니다.</p>\n<p>C++에서 String도 다른 일반적인 변수들처럼 사용됩니다.</p>\n<p>다른 변수들과 마찬가지로 선언과 동시에 초기화를 해줄 수도 있고, 선언 후 나중에 초기화를 해줄 수도 있습니다.</p>\n<p>다음 예제는 <code class=\"language-text\">using namespace std;</code>가 작성되어있다는 전제 하에 진행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 선언과 동시에 초기화</span>\n\nstring str<span class=\"token punctuation\">;</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome to Blog!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 선언 이후 초기화</span></code></pre></div>\n<h3 id=\"method\" style=\"position:relative;\"><a href=\"#method\" aria-label=\"method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>method?</h3>\n<p>String Class에서는 다양한 메소드들도 제공합니다.</p>\n<p>다음 세 개 정도만 알아두어도 간단한 문자열 컨트롤은 가능합니다.</p>\n<ol>\n<li>length()</li>\n<li>size()</li>\n<li>find()</li>\n</ol>\n<p>간단히 사용 방법을 알아봅시다!</p>\n<h4 id=\"length-size\" style=\"position:relative;\"><a href=\"#length-size\" aria-label=\"length size permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>length(), size()</h4>\n<p>일반적으로, <code class=\"language-text\">length()</code>와 <code class=\"language-text\">size()</code>는 같은 값을 반환합니다.</p>\n<p>이 둘이 완벽하게 같은 기능을 한다고 알고 있어도 사용하는데 별 무리는 없지만, 의미가 미묘하게 다릅니다.</p>\n<p><code class=\"language-text\">length()</code>메소드는 <strong>문자열의 길이</strong>를 나타내지만, <code class=\"language-text\">size()</code>메소드는 <strong>string 객체가 메모리에서 실제 사용하고 있는 크기</strong>를 나타냅니다.</p>\n<p>사용 방법 자체는 둘이 같기때문에 따로 신경써주지 않아도 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">;</span>\n\ncout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\ncout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></code></pre></div>\n<h4 id=\"find\" style=\"position:relative;\"><a href=\"#find\" aria-label=\"find permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>find()</h4>\n<p><code class=\"language-text\">find()</code>는 문자열을 찾고, 그 문자열의 시작 위치를 반환하는 메소드입니다.</p>\n<p>첫번째 인자로 찾을 '문자'나 '문자열'을 입력해주고, 두번째 인자로는 찾기 시작할 '위치'를 입력해줍니다.</p>\n<p>두번째 인자의 default값은 0으로, 입력해주지 않으면 처음부터 탐색합니다.</p>\n<p><code class=\"language-text\">&quot;Welcome to my blog!&quot;</code>라는 문자열에서 <code class=\"language-text\">&quot;my&quot;</code>라는 문자열의 시작 위치를 출력하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string str <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome to my blog!\"</span><span class=\"token punctuation\">;</span>\n\ncout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></code></pre></div>\n<p><code class=\"language-text\">&quot;W&quot;</code>가 0번 index이므로 <code class=\"language-text\">&quot;my&quot;</code>가 처음 시작하는 위치인 11이 출력된 것을 볼 수 있습니다.</p>\n<p>다음은 <code class=\"language-text\">&quot;abbbba&quot;</code>라는 문자열에서 두번째 <code class=\"language-text\">&quot;a&quot;</code>라는 문자의 시작 위치를 출력하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string str <span class=\"token operator\">=</span> <span class=\"token string\">\"abbbba\"</span><span class=\"token punctuation\">;</span>\n\ncout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>위 예제에서 두번째 인자로 입력한 <code class=\"language-text\">str.find(&quot;a&quot;)</code>는 0번째 index의 <code class=\"language-text\">&quot;a&quot;</code>를 찾고 0을 반환할 것입니다.</p>\n<p>이 값에 1을 더해줘서 첫번째로 <code class=\"language-text\">&quot;a&quot;</code>가 등장한 위치 다음부터 탐색하도록 하여 2번째 <code class=\"language-text\">&quot;a&quot;</code>의 위치를 찾아 5라는 값을 반환하게 됩니다.</p>","excerpt":"C++의 문자열? C++은 문자열을 쉽게 다룰 수 있는 String Class를 제공합니다. C++에서 String Class를 사용하기 위해서는 String 헤더 파일을 포함해야 합니다. 또한, String Class는 std namespace…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/cpp11/#c%EC%9D%98-%EB%AC%B8%EC%9E%90%EC%97%B4\">C++의 문자열?</a></p>\n<ul>\n<li><a href=\"/cpp11/#method\">method?</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/cpp11/"},"frontmatter":{"title":"바닥에서 시작하는 C++ (11) - 문자열(String)","date":"Apr 04, 2020","tags":["C++"],"keywords":["C","C++","Object-Oriented Programming","객체지향 프로그래밍","string","문자열","length","size","find"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/cpp11/","series":[],"lastmod":"0001-01-01"}}}