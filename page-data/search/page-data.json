{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## 네임스페이스(Namespace)\n\n네임스페이스란 이름이 기억되는 영역을 뜻하며, 이름이 소속된 공간을 의미합니다.\n\n네임스페이스는 C++ 프로그램을 작성할 때 발생하는 이름에 대한 충돌을 방지해 주는 방법을 제공합니다.\n\n이러한 네임스페이스는 C언어에는 없는 C++ 만의 새로운 기능입니다.\n\n \n\nC++ 프로그램의 표준 구성 요소인 클래스, 함수, 변수 등은 std라는 이름 공간에 저장되어 있습니다.\n\n따라서 C++ 프로그램에서 표준 헤더 파일인 iostream 내의 정의를 사용하려면 다음과 같이 사용해야 합니다.\n\n> 예제\n> ``` cpp\n> #include <iostream>\n> \n> #define TEXT \"Welcome to C++ Programming!!\"\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     std::cout << TEXT;\n> \n>     return 0;\n> \n> }\n> ```\n\n위의 예제처럼 std라는 네임스페이스에 있는 정의를 사용하려면, std:: 접두어를 붙여 해당 정의가 std라는 네임스페이스에 있다는 것을 컴파일러에 알려줘야 합니다.\n\n \n\n이러한 네임스페이스에 속한 정의를 간단하게 사용하려면 다음과 같은 명령문을 추가하면 됩니다.\n\n> ``` cpp\n> using namespace std; // std라는 네임스페이스에 속한 정의들은 네임스페이스 이름을 붙이지 않아도 사용할 수 있음.\n> ```\n\n다음 예제는 앞서 살펴본 예제와 정확히 같은 동작을 수행합니다.\n\n> 예제\n> ``` cpp\n> #include <iostream>\n> \n> #define TEXT \"Welcome to C++ Programming!!\"\n> \n> using namespace std;\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     cout << TEXT;\n> \n>     return 0;\n> \n> }\n> ```\n\n## 주석\n\n주석이란 코드에 대한 이해를 돕는 설명을 적거나 디버깅을 위해 작성하는 일종의 메모입니다.\n\nC++ 컴파일러는 주석은 무시하고 컴파일하므로, 실행 파일에서는 이러한 주석을 확인할 수 없습니다.\n\n \n\nC++에서 주석을 작성하는 문법은 다음과 같습니다.\n\n> 문법\n> ``` cpp\n> // 한 줄 주석\n> \n> /*\n> \n> 여러 줄 주석\n> \n> */\n> ```\n\nC++에서는 여러 줄 주석 안에 또 다른 한 줄 주석을 삽입할 수 있습니다.\n하지만 여러 줄 주석 안에 또 다른 여러 줄 주석은 중첩해서 삽입할 수는 없습니다.\n\n> ``` cpp\n> /*\n> \n> 여러 줄 주석\n> \n> //한 줄 주석 삽입 가능!\n>\n> */\n>\n> \n> /*\n> \n> 여러 줄 주석\n> \n> /*여러 줄 주석 삽입 불가*/\n>\n> */\n>\n> ```\n\n위의 예제 마지막 줄 */는 주석으로 처리되지 않은 것을 확인할 수 있습니다.","excerpt":"네임스페이스(Namespace) 네임스페이스란 이름이 기억되는 영역을 뜻하며, 이름이 소속된 공간을 의미합니다. 네임스페이스는 C++ 프로그램을 작성할 때 발생하는 이름에 대한 충돌을 방지해 주는 방법을 제공합니다. 이러한 네임스페이스는 C…","fields":{"slug":"/cpp02.md/"},"frontmatter":{"date":"Feb 16, 2020","title":"바닥부터 시작하는 C++ (2) - 네임스페이스, 주석","tags":["C++"]}}},{"node":{"rawMarkdownBody":"\n## C++의 특징\n\nC++이 프로그래밍 언어로써 가지는 특징은 다음과 같습니다.\n\n \n\n1. C++은 절차 지향적이며 구조적 프로그래밍 언어입니다.\n\n2. C++은 객체 지향 프로그래밍 언어입니다.\n\n3. C++은 일반화 프로그래밍 언어입니다.\n\n \n\n이처럼 C++은 세 가지 프로그래밍 방식을 모두 지원하는 언어이며, 따라서 다양한 방식으로 프로그램을 작성할 수 있습니다.\n\n또한, 다양한 시스템에서의 프로그래밍을 지원하는 유용하고도 강력한 클래스 라이브러리들이 아주 많이 제공됩니다.\n\n\n## 실행 파일 생성 과정\n\n![실행 파일 생성 과정](1.png)\n\n1. 소스 파일(source file)의 작성\n\n2. 선행처리기(preprocessor)에 의한 선행처리\n\n3. 컴파일러(compiler)에 의한 컴파일\n\n4. 링커(linker)에 의한 링크\n\n5. 실행 파일(executable file)의 생성\n\n## 기본 구조\n\n간단한 C++ 프로그램의 기본 구조는 다음과 같습니다.\n\n언제나 다음과 같이 구성되는 것은 아니지만 많은 C++ 프로그램이 이와 비슷한 형태로 구성됩니다.\n\n> 문법\n> ``` cpp\n> #include 문\n> \n> #define 문\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     명령문;\n> \n>     return 문;\n> \n> }\n> ```\n\n간단한 텍스트를 출력하는 예제는 다음과 같습니다.\n\n> 예제\n> ``` cpp\n> #include <iostream>\n> \n> #define TEXT \"Welcome to C++ Programming!!\"\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     std::cout << TEXT; // Welcome to C++ Programming!!\n> \n>     return 0;\n> \n> }\n> ```\n\n### main() 함수\n\nC++ 프로그램은 가장 먼저 main() 함수를 찾고, 그곳에서부터 실행을 시작합니다.\n\n따라서 모든 C++ 프로그램은 반드시 하나의 main() 함수를 가지고 있어야 합니다.\n\n만약 main() 함수를 발견하지 못하면 C++ 컴파일러는 오류를 발생시킬 것입니다.\n\n### 명령문(Statement)\n\nC++ 프로그램의 동작을 명시하고, 이러한 동작을 컴퓨터에 알려주는 데 사용되는 문장을 명령문(statement)이라고 합니다.\n\n이러한 C++의 모든 명령문은 반드시 세미콜론(;)으로 끝나야 합니다.\n\n> ``` cpp\n> std::cout << \"C++ 프로그래밍\"; // 정상적으로 출력됨.\n> \n> std::cout << \"C++ 프로그래밍\"  // 오류가 발생함.\n> \n> ```\n\n### 반환문(Return)\n\n반환문은 함수의 종료를 의미하며, 함수를 호출한 곳으로 결괏값을 반환하는 역할을 합니다.\n\n특히 main() 함수가 반환되면, 프로그램 전체가 종료됩니다.\n\n### 선행처리문(Preprocess)\n\n\\#include 문과 #define 문은 모두 선행처리기에 의해 처리되는 선행처리문입니다.\n\n \n\n\\#include 문은 외부에 선언된 함수나 상수 등을 사용하기 위해서 헤더 파일의 내용을 현재 파일에 포함할 때 사용합니다.\n\nC언어에서는 헤더 파일에 .h 확장자를 사용했지만, C++에서는 헤더 파일의 확장자를 사용하지 않기로 합니다.\n\n따라서 기존 C언어 헤더 파일들의 이름 앞에 c를 추가하여 C++ 스타일의 헤더 파일로 변환하기도 합니다.\n> ``` cpp\n> #include <math.h> // C, C++ 모두 허용\n> \n> #include <cmath>  // C++에서만 허용\n> ```\n\n물론 원칙은 위와 같이 바뀌었지만 C++ 프로그램에서는 기존의 C언어 스타일로도 헤더 파일을 사용할 수 있습니다.\n\n#define 문은 함수나 상수를 단순화해주는 매크로를 정의할 때 사용합니다.","excerpt":"C++의 특징 C++이 프로그래밍 언어로써 가지는 특징은 다음과 같습니다. C++은 절차 지향적이며 구조적 프로그래밍 언어입니다. C++은 객체 지향 프로그래밍 언어입니다. C++은 일반화 프로그래밍 언어입니다. 이처럼 C…","fields":{"slug":"/cpp01.md/"},"frontmatter":{"date":"Feb 14, 2020","title":"바닥부터 시작하는 C++ (1) - 기본 특징","tags":["C++"]}}}]}},"pageContext":{}}}