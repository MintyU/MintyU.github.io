{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## 상수\n\n상수(constant)란 변수와 마찬가지로 데이터를 저장할 수 있는 메모리 공간을 의미합니다.\n\n하지만 상수가 변수와 다른 점은 프로그램이 실행되는 동안 메모리에 저장된 데이터를 변경할 수 없다는 점입니다.\n\nC++에서 상수는 표현 방식에 따라 다음과 같이 나눌 수 있습니다.\n\n \n\n1. 리터럴 상수(literal constant)\n\n2. 심볼릭 상수(symbolic constant)\n\n## 리터럴 상수\n\n리터럴(Literal)은 변수에 넣는 변하지 않는 데이터를 말합니다.\n> ``` cpp\n> a = 5;\n> ```\n\n이 코드에서 5는 리터럴 상수입니다.\n\n리터럴 상수는 정수, 부동 소수점, 문자, 문자열, Boolean, 포인터 및 사용자가 정의한 리터럴로 분류 할 수 있습니다.\n\n### 정수 숫자\n> ``` cpp\n> 231\n>\n> 5542\n>\n> -43\n> ```\n\n정숫값을 식별하는 숫자 상수입니다. 인용 부호나 다른 특수 문자로 묶여 있지 않습니다.\n\n231은 문자 그대로 항상 231이라는 수 자체를 나타냅니다.\n\n\n### 부동 소수점 숫자\n\n소수점과 지수로 실제 값을 표현합니다.\n\n> ``` cpp\n> 3.14159    // 3.14159\n>\n> 6.02e23    // 6.02 x 10^23\n>\n> 1.6e-19    // 1.6 x 10^-19\n>\n> 3.0        // 3.0\n> ```\n\n### 문자 및 문자열 리터럴\n\n문자 및 문자열 리터럴은 따옴표로 묶습니다.\n\n> ``` cpp\n> 'z'\n> \n> 'q'\n> \n> \"Hello world\"\n> \n> \"KHU Software Convergence\"\n> \n> ```\n\n처음 두 표현식은 단일 문자 리터럴을 나타내고, 다음 두 표현식은 여러 문자로 구성된 문자열 리터럴을 나타냅니다.\n\n단일 문자를 나타내려면 작은 따옴표(`'`)로 묶고 문자열을 나타내려면 큰따옴표(`\"`)로 문자를 묶습니다.\n\n### 그 외의 리터럴\n\nC++에는 세 가지 키워드 리터럴(true, false, nullptr)이 있습니다.\n\n- bool 유형의 변수에는 true와 false만 사용이 가능합니다.\n- nullptr은 null 포인터 값 입니다.\n\n## 상수 표현식\n\n다음처럼 `const`를 사용하여 상수를 정의할 수도 있습니다.\n\n``` cpp\nconst double pi = 3.1415926;\n\nconst char tab = '\\t';\n```\n\n## 전처리기 정의 (#define)\n\n> ``` cpp\n> #define PI 3.14159\n> \n> #define NEWLINE '\\n'\n> ```\n\n**\\#define은 전 처리기 지시문이며, 끝에 세미콜론(`;`)이 필요하지 않습니다.**","excerpt":"상수 상수(constant)란 변수와 마찬가지로 데이터를 저장할 수 있는 메모리 공간을 의미합니다. 하지만 상수가 변수와 다른 점은 프로그램이 실행되는 동안 메모리에 저장된 데이터를 변경할 수 없다는 점입니다. C…","fields":{"slug":"/cpp05.md/"},"frontmatter":{"date":"Feb 20, 2020","title":"바닥부터 시작하는 C++ (5) - 상수","tags":["C++"]}}},{"node":{"rawMarkdownBody":"\n## 변수(Variable)\n\n변수(variable)란 데이터(data)를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간을 의미합니다.\n\n즉, 변수란 데이터(data)를 저장할 수 있는 메모리 공간을 의미하며, 이렇게 저장된 값은 변경될 수 있습니다.\n\n \n\nC++에서 숫자 표현에 관련된 변수는 정수형 변수와 실수형 변수로 구분할 수 있습니다.\n\n또다시 정수형 변수는 char형, int형, long형, long long형 변수로, 실수형 변수는 float형, double형 변수로 구분됩니다.\n\n## 변수의 이름 생성 규칙\n\nC++에서는 변수의 이름을 비교적 자유롭게 지을 수 있습니다.\n\n변수의 이름은 해당 변수에 저장될 데이터의 의미를 잘 나타내도록 짓는 것이 좋습니다.\n\n \n\nC++에서 변수의 이름을 생성할 때 반드시 지켜야 하는 규칙은 다음과 같습니다.\n\n \n1. 변수의 이름은 영문자(대소문자), 숫자, 언더스코어(_)로만 구성됩니다.\n\n2. 변수의 이름은 숫자로 시작될 수 없습니다.\n\n3. 변수의 이름 사이에는 공백을 포함할 수 없습니다.\n\n4. 변수의 이름으로 C++에서 미리 정의된 키워드(keyword)는 사용할 수 없습니다.\n\n5. 변수 이름의 길이에는 제한이 없습니다.\n\n**C++은 변수의 이름에 대소문자를 구분합니다!**\n\n## 변수와 메모리 주소\n\n변수는 기본적으로 메모리의 주소(address)를 기억하는 역할을 합니다.\n\n메모리 주소란 물리적인 메모리 공간을 서로 구분하기 위해 사용되는 일종의 식별자입니다.\n\n즉, 메모리 주소란 메모리 공간에서의 정확한 위치를 식별하기 위한 고유 주소를 의미합니다.\n\n \n\n변수를 참조할 때는 메모리의 주소를 참조하는 것이 아닌, 해당 주소에 저장된 데이터를 참조하게 됩니다.\n\n따라서 변수는 데이터가 저장된 메모리의 주소뿐만 아니라, 저장된 데이터의 길이와 형태에 관한 정보도 같이 기억해야 합니다.\n\n \n\n다음 그림은 메모리상에 변수가 어떤 식으로 저장되는지를 보여줍니다.\n\n![변수 저장 방법](1.png)\n\n이 내용은 포인터의 개념을 이해하기 위해 필요한 개념이므로 익혀두는 것이 좋습니다.\n\n","excerpt":"변수(Variable) 변수(variable)란 데이터(data)를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간을 의미합니다. 즉, 변수란 데이터(data…","fields":{"slug":"/cpp04.md/"},"frontmatter":{"date":"Feb 18, 2020","title":"바닥부터 시작하는 C++ (4) - 변수","tags":["C++"]}}},{"node":{"rawMarkdownBody":"\n## iostream(Input/Output Stream)\n\n사용자가 프로그램과 대화하기 위해서는 사용자와 프로그램 사이의 입출력을 담당하는 수단이 필요합니다.\n\nC++의 모든 것은 객체로 표현되므로, 입출력을 담당하는 수단 또한 C언어의 함수와는 달리 모두 객체입니다.\n\n \n\nC언어의 printf() 함수나 scanf() 함수처럼 C++에서도 **iostream 헤더 파일에 표준 입출력 클래스를 정의**하고 있습니다.\n\nC++에서는 **cout 객체로 출력** 작업을, **cin 객체로 입력** 작업을 수행하고 있습니다.\n\n \n\n또한, C++에서는 기존의 C언어 스타일처럼 printf() 함수나 scanf() 함수로도 입출력 작업을 수행할 수 있습니다.\n\n## cout 객체\n\ncout 객체는 다양한 데이터를 출력하는 데 사용되는 C++에서 미리 정의된 출력 스트림을 나타내는 객체입니다.\n\ncout 객체를 사용하는 문법은 다음과 같습니다.\n\n> 문법\n> ``` cpp\n> std::cout << 출력할 데이터;\n> ```\n\n삽입 연산자(<<)는 오른쪽에 위치한 출력할 데이터를 출력 스트림에 삽입합니다.\n\n이렇게 출력 스트림에 삽입된 데이터는 스트림을 통해 출력 장치로 전달되어 출력됩니다.\n\n``` cpp\ncout << \"Hello World!\"; // Hello World!\n```\n\n## cin 객체\n\ncin 객체는 다양한 데이터를 입력받는 데 사용되는 C++에서 미리 정의된 입력 스트림을 나타내는 객체입니다.\n\ncin 객체를 사용하는 문법은 다음과 같습니다.\n\n> 문법\n> ``` cpp\n> std::cin >> 저장할 변수;\n> ```\n추출 연산자(>>)를 통해 사용자가 입력한 데이터를 입력 스트림에서 추출하여, 오른쪽에 위치한 변수에 저장합니다.\n\n이때 cin 객체는 자동으로 사용자가 입력한 데이터를 오른쪽에 위치한 변수의 타입과 동일하게 변환시켜 줍니다.\n\n**주의 : cout과 cin의 화살표 방향이 서로 다릅니다!**\n\n> 예제\n> ``` cpp\n> #include <iostream>\n> \n> using namespace std;\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     int age;\n> \n>  \n> \n>     cout << \"나이를 입력해 주세요 : \";\n> \n>     cin >> age;\n> \n>  \n> \n>     cout << age << \"살 입니다.\" << endl;\n> \n>     return 0;\n> \n> }\n> ```\n\n위의 예제에서 여러분이 입력한 데이터는 자동으로 정수를 저장할 때 사용하는 타입으로 변환될 것입니다.\n\n만약에 문자열을 입력하면 cin 객체는 변수 age에 숫자가 아니라는 의미인 0을 전달할 것입니다.\n\n## C언어 표준 입출력 함수와의 차이점\n\nC언어 표준 입출력 함수인 printf() 함수나 scanf() 함수와 C++ 표준 입출력 객체와의 차이점은 다음과 같습니다.\n\n \n\n1. 삽입 연산자(<<)와 추출 연산자(>>)가 데이터의 흐름을 나타내므로 좀 더 직관적입니다.\n\n2. C++ 표준 입출력 객체는 입출력 데이터의 타입을 자동으로 변환시켜주므로 더욱 편리하고 안전합니다.\n\n","excerpt":"iostream(Input/Output Stream) 사용자가 프로그램과 대화하기 위해서는 사용자와 프로그램 사이의 입출력을 담당하는 수단이 필요합니다. C++의 모든 것은 객체로 표현되므로, 입출력을 담당하는 수단 또한 C…","fields":{"slug":"/cpp03.md/"},"frontmatter":{"date":"Feb 18, 2020","title":"바닥부터 시작하는 C++ (3) - iostream","tags":["C++"]}}},{"node":{"rawMarkdownBody":"\n## 네임스페이스(Namespace)\n\n네임스페이스란 이름이 기억되는 영역을 뜻하며, 이름이 소속된 공간을 의미합니다.\n\n네임스페이스는 C++ 프로그램을 작성할 때 발생하는 이름에 대한 충돌을 방지해 주는 방법을 제공합니다.\n\n이러한 네임스페이스는 C언어에는 없는 C++ 만의 새로운 기능입니다.\n\n \n\nC++ 프로그램의 표준 구성 요소인 클래스, 함수, 변수 등은 std라는 이름 공간에 저장되어 있습니다.\n\n따라서 C++ 프로그램에서 표준 헤더 파일인 iostream 내의 정의를 사용하려면 다음과 같이 사용해야 합니다.\n\n> 예제\n> ``` cpp\n> #include <iostream>\n> \n> #define TEXT \"Welcome to C++ Programming!!\"\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     std::cout << TEXT;\n> \n>     return 0;\n> \n> }\n> ```\n\n위의 예제처럼 std라는 네임스페이스에 있는 정의를 사용하려면, std:: 접두어를 붙여 해당 정의가 std라는 네임스페이스에 있다는 것을 컴파일러에 알려줘야 합니다.\n\n \n\n이러한 네임스페이스에 속한 정의를 간단하게 사용하려면 다음과 같은 명령문을 추가하면 됩니다.\n\n> ``` cpp\n> using namespace std; // std라는 네임스페이스에 속한 정의들은 네임스페이스 이름을 붙이지 않아도 사용할 수 있음.\n> ```\n\n다음 예제는 앞서 살펴본 예제와 정확히 같은 동작을 수행합니다.\n\n> 예제\n> ``` cpp\n> #include <iostream>\n> \n> #define TEXT \"Welcome to C++ Programming!!\"\n> \n> using namespace std;\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     cout << TEXT;\n> \n>     return 0;\n> \n> }\n> ```\n\n## 주석\n\n주석이란 코드에 대한 이해를 돕는 설명을 적거나 디버깅을 위해 작성하는 일종의 메모입니다.\n\nC++ 컴파일러는 주석은 무시하고 컴파일하므로, 실행 파일에서는 이러한 주석을 확인할 수 없습니다.\n\n \n\nC++에서 주석을 작성하는 문법은 다음과 같습니다.\n\n> 문법\n> ``` cpp\n> // 한 줄 주석\n> \n> /*\n> \n> 여러 줄 주석\n> \n> */\n> ```\n\nC++에서는 여러 줄 주석 안에 또 다른 한 줄 주석을 삽입할 수 있습니다.\n하지만 여러 줄 주석 안에 또 다른 여러 줄 주석은 중첩해서 삽입할 수는 없습니다.\n\n> ``` cpp\n> /*\n> \n> 여러 줄 주석\n> \n> //한 줄 주석 삽입 가능!\n>\n> */\n>\n> \n> /*\n> \n> 여러 줄 주석\n> \n> /*여러 줄 주석 삽입 불가*/\n>\n> */\n>\n> ```\n\n위의 예제 마지막 줄 */는 주석으로 처리되지 않은 것을 확인할 수 있습니다.","excerpt":"네임스페이스(Namespace) 네임스페이스란 이름이 기억되는 영역을 뜻하며, 이름이 소속된 공간을 의미합니다. 네임스페이스는 C++ 프로그램을 작성할 때 발생하는 이름에 대한 충돌을 방지해 주는 방법을 제공합니다. 이러한 네임스페이스는 C…","fields":{"slug":"/cpp02.md/"},"frontmatter":{"date":"Feb 16, 2020","title":"바닥부터 시작하는 C++ (2) - 네임스페이스, 주석","tags":["C++"]}}},{"node":{"rawMarkdownBody":"\n## C++의 특징\n\nC++이 프로그래밍 언어로써 가지는 특징은 다음과 같습니다.\n\n \n\n1. C++은 절차 지향적이며 구조적 프로그래밍 언어입니다.\n\n2. C++은 객체 지향 프로그래밍 언어입니다.\n\n3. C++은 일반화 프로그래밍 언어입니다.\n\n \n\n이처럼 C++은 세 가지 프로그래밍 방식을 모두 지원하는 언어이며, 따라서 다양한 방식으로 프로그램을 작성할 수 있습니다.\n\n또한, 다양한 시스템에서의 프로그래밍을 지원하는 유용하고도 강력한 클래스 라이브러리들이 아주 많이 제공됩니다.\n\n\n## 실행 파일 생성 과정\n\n![실행 파일 생성 과정](1.png)\n\n1. 소스 파일(source file)의 작성\n\n2. 선행처리기(preprocessor)에 의한 선행처리\n\n3. 컴파일러(compiler)에 의한 컴파일\n\n4. 링커(linker)에 의한 링크\n\n5. 실행 파일(executable file)의 생성\n\n## 기본 구조\n\n간단한 C++ 프로그램의 기본 구조는 다음과 같습니다.\n\n언제나 다음과 같이 구성되는 것은 아니지만 많은 C++ 프로그램이 이와 비슷한 형태로 구성됩니다.\n\n> 문법\n> ``` cpp\n> #include 문\n> \n> #define 문\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     명령문;\n> \n>     return 문;\n> \n> }\n> ```\n\n간단한 텍스트를 출력하는 예제는 다음과 같습니다.\n\n> 예제\n> ``` cpp\n> #include <iostream>\n> \n> #define TEXT \"Welcome to C++ Programming!!\"\n> \n>  \n> \n> int main()\n> \n> {\n> \n>     std::cout << TEXT; // Welcome to C++ Programming!!\n> \n>     return 0;\n> \n> }\n> ```\n\n### main() 함수\n\nC++ 프로그램은 가장 먼저 main() 함수를 찾고, 그곳에서부터 실행을 시작합니다.\n\n따라서 모든 C++ 프로그램은 반드시 하나의 main() 함수를 가지고 있어야 합니다.\n\n만약 main() 함수를 발견하지 못하면 C++ 컴파일러는 오류를 발생시킬 것입니다.\n\n### 명령문(Statement)\n\nC++ 프로그램의 동작을 명시하고, 이러한 동작을 컴퓨터에 알려주는 데 사용되는 문장을 명령문(statement)이라고 합니다.\n\n이러한 C++의 모든 명령문은 반드시 세미콜론(;)으로 끝나야 합니다.\n\n> ``` cpp\n> std::cout << \"C++ 프로그래밍\"; // 정상적으로 출력됨.\n> \n> std::cout << \"C++ 프로그래밍\"  // 오류가 발생함.\n> \n> ```\n\n### 반환문(Return)\n\n반환문은 함수의 종료를 의미하며, 함수를 호출한 곳으로 결괏값을 반환하는 역할을 합니다.\n\n특히 main() 함수가 반환되면, 프로그램 전체가 종료됩니다.\n\n### 선행처리문(Preprocess)\n\n\\#include 문과 #define 문은 모두 선행처리기에 의해 처리되는 선행처리문입니다.\n\n \n\n\\#include 문은 외부에 선언된 함수나 상수 등을 사용하기 위해서 헤더 파일의 내용을 현재 파일에 포함할 때 사용합니다.\n\nC언어에서는 헤더 파일에 .h 확장자를 사용했지만, C++에서는 헤더 파일의 확장자를 사용하지 않기로 합니다.\n\n따라서 기존 C언어 헤더 파일들의 이름 앞에 c를 추가하여 C++ 스타일의 헤더 파일로 변환하기도 합니다.\n> ``` cpp\n> #include <math.h> // C, C++ 모두 허용\n> \n> #include <cmath>  // C++에서만 허용\n> ```\n\n물론 원칙은 위와 같이 바뀌었지만 C++ 프로그램에서는 기존의 C언어 스타일로도 헤더 파일을 사용할 수 있습니다.\n\n\\#define 문은 함수나 상수를 단순화해주는 매크로를 정의할 때 사용합니다.","excerpt":"C++의 특징 C++이 프로그래밍 언어로써 가지는 특징은 다음과 같습니다. C++은 절차 지향적이며 구조적 프로그래밍 언어입니다. C++은 객체 지향 프로그래밍 언어입니다. C++은 일반화 프로그래밍 언어입니다. 이처럼 C…","fields":{"slug":"/cpp01.md/"},"frontmatter":{"date":"Feb 14, 2020","title":"바닥부터 시작하는 C++ (1) - 기본 특징","tags":["C++"]}}}]}},"pageContext":{}}}