{"componentChunkName":"component---src-templates-post-tsx","path":"/cpp03/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"iostreaminputoutput-stream\" style=\"position:relative;\"><a href=\"#iostreaminputoutput-stream\" aria-label=\"iostreaminputoutput stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iostream(Input/Output Stream)</h2>\n<p>사용자가 프로그램과 대화하기 위해서는 사용자와 프로그램 사이의 입출력을 담당하는 수단이 필요합니다.</p>\n<p>C++의 모든 것은 객체로 표현되므로, 입출력을 담당하는 수단 또한 C언어의 함수와는 달리 모두 객체입니다.</p>\n<p>C언어의 printf() 함수나 scanf() 함수처럼 C++에서도 <strong>iostream 헤더 파일에 표준 입출력 클래스를 정의</strong>하고 있습니다.</p>\n<p>C++에서는 <strong>cout 객체로 출력</strong> 작업을, <strong>cin 객체로 입력</strong> 작업을 수행하고 있습니다.</p>\n<p>또한, C++에서는 기존의 C언어 스타일처럼 printf() 함수나 scanf() 함수로도 입출력 작업을 수행할 수 있습니다.</p>\n<h2 id=\"cout-객체\" style=\"position:relative;\"><a href=\"#cout-%EA%B0%9D%EC%B2%B4\" aria-label=\"cout 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cout 객체</h2>\n<p>cout 객체는 다양한 데이터를 출력하는 데 사용되는 C++에서 미리 정의된 출력 스트림을 나타내는 객체입니다.</p>\n<p>cout 객체를 사용하는 문법은 다음과 같습니다.</p>\n<blockquote>\n<p>문법</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> 출력할 데이터<span class=\"token punctuation\">;</span></code></pre></div>\n</blockquote>\n<p>삽입 연산자(&#x3C;&#x3C;)는 오른쪽에 위치한 출력할 데이터를 출력 스트림에 삽입합니다.</p>\n<p>이렇게 출력 스트림에 삽입된 데이터는 스트림을 통해 출력 장치로 전달되어 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello World!</span></code></pre></div>\n<h2 id=\"cin-객체\" style=\"position:relative;\"><a href=\"#cin-%EA%B0%9D%EC%B2%B4\" aria-label=\"cin 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cin 객체</h2>\n<p>cin 객체는 다양한 데이터를 입력받는 데 사용되는 C++에서 미리 정의된 입력 스트림을 나타내는 객체입니다.</p>\n<p>cin 객체를 사용하는 문법은 다음과 같습니다.</p>\n<blockquote>\n<p>문법</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> 저장할 변수<span class=\"token punctuation\">;</span></code></pre></div>\n<p>추출 연산자(>>)를 통해 사용자가 입력한 데이터를 입력 스트림에서 추출하여, 오른쪽에 위치한 변수에 저장합니다.</p>\n</blockquote>\n<p>이때 cin 객체는 자동으로 사용자가 입력한 데이터를 오른쪽에 위치한 변수의 타입과 동일하게 변환시켜 줍니다.</p>\n<p><strong>주의 : cout과 cin의 화살표 방향이 서로 다릅니다!</strong></p>\n<blockquote>\n<p>예제</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n \n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"나이를 입력해 주세요 : \"</span><span class=\"token punctuation\">;</span>\n\n    cin <span class=\"token operator\">>></span> age<span class=\"token punctuation\">;</span>\n\n \n\n    cout <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"살 입니다.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<p>위의 예제에서 여러분이 입력한 데이터는 자동으로 정수를 저장할 때 사용하는 타입으로 변환될 것입니다.</p>\n<p>만약에 문자열을 입력하면 cin 객체는 변수 age에 숫자가 아니라는 의미인 0을 전달할 것입니다.</p>\n<h2 id=\"c언어-표준-입출력-함수와의-차이점\" style=\"position:relative;\"><a href=\"#c%EC%96%B8%EC%96%B4-%ED%91%9C%EC%A4%80-%EC%9E%85%EC%B6%9C%EB%A0%A5-%ED%95%A8%EC%88%98%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"c언어 표준 입출력 함수와의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C언어 표준 입출력 함수와의 차이점</h2>\n<p>C언어 표준 입출력 함수인 printf() 함수나 scanf() 함수와 C++ 표준 입출력 객체와의 차이점은 다음과 같습니다.</p>\n<ol>\n<li>삽입 연산자(&#x3C;&#x3C;)와 추출 연산자(>>)가 데이터의 흐름을 나타내므로 좀 더 직관적입니다.</li>\n<li>C++ 표준 입출력 객체는 입출력 데이터의 타입을 자동으로 변환시켜주므로 더욱 편리하고 안전합니다.</li>\n</ol>","excerpt":"iostream(Input/Output Stream) 사용자가 프로그램과 대화하기 위해서는 사용자와 프로그램 사이의 입출력을 담당하는 수단이 필요합니다. C++의 모든 것은 객체로 표현되므로, 입출력을 담당하는 수단 또한 C…","tableOfContents":"<ul>\n<li><a href=\"/cpp03/#iostreaminputoutput-stream\">iostream(Input/Output Stream)</a></li>\n<li><a href=\"/cpp03/#cout-%EA%B0%9D%EC%B2%B4\">cout 객체</a></li>\n<li><a href=\"/cpp03/#cin-%EA%B0%9D%EC%B2%B4\">cin 객체</a></li>\n<li><a href=\"/cpp03/#c%EC%96%B8%EC%96%B4-%ED%91%9C%EC%A4%80-%EC%9E%85%EC%B6%9C%EB%A0%A5-%ED%95%A8%EC%88%98%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">C언어 표준 입출력 함수와의 차이점</a></li>\n</ul>","fields":{"slug":"/cpp03/"},"frontmatter":{"title":"바닥부터 시작하는 C++ (3) - iostream","date":"Feb 18, 2020","tags":["C++"],"keywords":["C++","C","Object-Oriented Programming","객체지향 프로그래밍","iostream","cout","cin","endl"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/cpp03/","series":[],"lastmod":"0001-01-01"}}}