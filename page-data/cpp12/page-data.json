{"componentChunkName":"component---src-templates-post-tsx","path":"/cpp12/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"fstream\" style=\"position:relative;\"><a href=\"#fstream\" aria-label=\"fstream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fstream</h2>\n<p>C++에서 입력과 출력을 관리하기 위해 사용했던 <code class=\"language-text\">&lt;iostream&gt;</code>헤더파일과 마찬가지로, 파일을 통한 데이터 입출력을 관리하는 헤더 파일은 <code class=\"language-text\">&lt;fstream&gt;</code>으로 정의되어 있습니다.</p>\n<p>또한, <code class=\"language-text\">&lt;iostream&gt;</code>에서 입력은 istream, 출력은 ostream이라는 Class를 통해 정의된 것처럼 <code class=\"language-text\">&lt;fstream&gt;</code>에서 파일 열기(read)는 ifstream, 파일 쓰기(write)는 ofstream으로 Class가 정의되어 있습니다. 'i'와 'o'는 각각 in과 out을 의미합니다.</p>\n<p><code class=\"language-text\">&lt;iostream&gt;</code>헤더와 <code class=\"language-text\">&lt;fstream&gt;</code>헤더에서는 공통적으로 데이터의 이동 방향을 철저히 '실행 파일'기준으로 처리합니다.</p>\n<p>예를 들자면, <code class=\"language-text\">&lt;iostream&gt;</code>을 통해 실행 파일에 데이터를 '입력'하는 것이 istream이며 '출력'하는 것이 ostream이지만</p>\n<p>실행 파일에서 <code class=\"language-text\">&lt;fstream&gt;</code>을 통해 txt파일에 데이터를 '입력'하는것은 ofstream이며, 파일로부터 데이터를 불러오는 것은 ifstream입니다.</p>\n<p>사실 이렇게 해석하면 굉장히 혼란의 여지가 많습니다.</p>\n<p>실행 파일에서 <code class=\"language-text\">&lt;fstream&gt;</code>을 통해 txt파일로 데이터를 '출력'(내보내는 것)이 ofstream이며, txt파일로부터 데이터를 '입력'받는것을 ifstream이라고 해석하는 것이 자연스럽습니다.</p>\n<h3 id=\"ifstream\" style=\"position:relative;\"><a href=\"#ifstream\" aria-label=\"ifstream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ifstream</h3>\n<p>우선 텍스트파일로부터 데이터를 읽어오는 ifstream에 대해 먼저 알아보겠습니다.</p>\n<p>ifstream 객체를 하나 생성하고, 읽어올 파일을 선택해야 합니다.</p>\n<p>이 방법에는 두 가지 방법이 있습니다.</p>\n<p>첫째는 선언과 동시에 파일을 지정해주는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">ifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>둘째는 선언 후 파일을 지정해주는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">ifstream fin<span class=\"token punctuation\">;</span>\nfin<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 두 예제 모두 <code class=\"language-text\">fin</code>이라는 이름의 객체가 <code class=\"language-text\">&quot;text.txt&quot;</code>파일을 열어놓은 상태입니다.</p>\n<p>파일이 제대로 열렸는지를 확인하는 방법은 다음과 같습니다(ifstream 객체의 이름을 fin으로 설정했다는 가정 하에 진행합니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error, no such file exists\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 열려고 하는 파일이 존재하지 않을 때, 에러 메시지를 출력하며 프로그램을 종료합니다.</p>\n<p>파일이 잘 열렸다면, 이제 파일 안에 있는 데이터를 가져올 차례입니다.</p>\n<p>텍스트 파일의 내용은 다음과 같다고 가정하겠습니다.</p>\n<blockquote>\n<p>text.txt</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n2\n3\n4\n5</code></pre></div>\n</blockquote>\n<p>이제 <code class=\"language-text\">&lt;iostream&gt;</code>헤더파일의 <code class=\"language-text\">cin</code>의 사용법과 비슷하게 정의해놓은 <code class=\"language-text\">fin</code>을 사용하면 됩니다.</p>\n<p>다음은 <code class=\"language-text\">text.txt</code>의 내용을 읽어와서 출력하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fin 객체 생성(cin 처럼 이용!)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error, no such file exists\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 파일 열림 확인</span>\n\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        fin <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 읽어올 파일의 끝이면(End Of File)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 읽기를 마치고 반복문을 나간다.</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    fin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 파일 닫기</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>main함수 안의 반복문을 통해 파일에서 한 단어씩 읽어온 후, 출력하는 예제입니다.</p>\n<p><code class=\"language-text\">fin.eof()</code>는 <code class=\"language-text\">fin</code>을 통해서 읽어온 파일의 끝에 도달하면, True를 리턴합니다.</p>\n<p>이를 통해 조건문으로 파일의 끝까지 읽었을 때 반복문을 탈출하도록 할 수 있습니다.</p>\n<p>파일을 열고 잘 출력까지 마무리했다면, 파일을 닫아줄 차례입니다.</p>\n<p>예제의 <code class=\"language-text\">fin.close()</code>가 바로 그 역할입니다.</p>\n<p>사용 후 닫지 않는다면 열려있는동안 파일이 Lock되거나 다른 사람이 이용하지 못하게 될 수 있으므로, 사용 후에는 꼭 닫아주도록 합시다.</p>\n<h4 id=\"한-줄씩-입력을-받고-싶다면\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A4%84%EC%94%A9-%EC%9E%85%EB%A0%A5%EC%9D%84-%EB%B0%9B%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4\" aria-label=\"한 줄씩 입력을 받고 싶다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 줄씩 입력을 받고 싶다면?</h4>\n<p>ifstream도 cin과 마찬가지로 화이트스페이스(whitespace)를 기준으로 입력을 구분합니다.</p>\n<p>따라서, 스페이스바를 통한 공백이나 줄바꿈을 통해 입력을 구분하게 됩니다.</p>\n<p>하지만, 단어가 아닌 문장으로, 띄어쓰기에 상관없이 한 줄씩 입력을 받고 싶다면 <code class=\"language-text\">std::getline(입력스트림 객체, 문자열 변수)</code>를 이용하면 됩니다.</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lorem.txt\n\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</code></pre></div>\n</blockquote>\n<p>위와 같은 텍스트가 있다고 가정한 후, 한 줄씩 읽어와서 출력해주는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ifstream <span class=\"token function\">fin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lorem.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fin 객체 생성(cin 처럼 이용!)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error, no such file exists\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 파일 열림 확인</span>\n\n    string str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 파일이 끝날때까지 한 줄씩 읽어오기</span>\n    <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    fin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 파일 닫기</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"ofstream\" style=\"position:relative;\"><a href=\"#ofstream\" aria-label=\"ofstream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ofstream</h3>\n<p>ofstream은 데이터를 외부 파일로 저장하는 역할을 합니다.</p>\n<p>ifstream과 마찬가지로, ofstream 객체를 만들고 데이터를 내보낼 파일 이름을 지정해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">ofstream <span class=\"token function\">fout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 선언과 동시에 파일 이름 지정</span>\n\nofstream fout<span class=\"token punctuation\">;</span>\nfout<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 선언 후 파일 이름 지정</span></code></pre></div>\n<p>이렇게 선언한 후, 앞에서 fin을 cin처럼 사용한것과 같이 fout을 cout처럼 사용해주면 됩니다.</p>\n<p>ofstream에서는 지정해준 파일의 이름이 없더라도 자동으로 생성해주므로 굳이 파일이 없는 경우 오류를 출력할 필요가 없습니다.</p>\n<p>또한, 이미 내용이 저장되어 있는 파일을 지정하고 데이터를 저장해주었을 경우 내용을 덮어쓰게 됩니다.</p>\n<p><strong>즉, 이미 저장되어있던 내용은 삭제되고, 새로운 내용이 저장됩니다.</strong></p>\n<p>다음은 ofstream을 통해 <code class=\"language-text\">result.txt</code>에 1부터 5까지 줄을 바꾸어 하나씩 저장하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tofstream <span class=\"token function\">fout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        fout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    fout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 실행하면 실행한 디렉토리 안에 다음과 같은 텍스트 파일이 생성됩니다.</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">result.txt\n\n1\n2\n3\n4\n5</code></pre></div>\n</blockquote>\n<p>여기까지 C++로 외부 파일과 입출력을 통해 상호작용하는 방법에 대해 알아보았습니다.</p>\n<p>아마 다른 언어로 이미 파일 입출력을 학습했던 경험이 있다면 크게 어렵게 느껴지지는 않을 것이라 예상됩니다.</p>\n<p>(파이썬에서의 파일 입출력 방식과 굉장히 비슷하다고 느꼈습니다.)</p>","excerpt":"fstream C++에서 입력과 출력을 관리하기 위해 사용했던 헤더파일과 마찬가지로, 파일을 통한 데이터 입출력을 관리하는 헤더 파일은 으로 정의되어 있습니다. 또한, 에서 입력은 istream, 출력은 ostream이라는 Class…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/cpp12/#fstream\">fstream</a></p>\n<ul>\n<li><a href=\"/cpp12/#ifstream\">ifstream</a></li>\n<li><a href=\"/cpp12/#ofstream\">ofstream</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/cpp12/"},"frontmatter":{"title":"바닥에서 시작하는 C++ (12) - 파일 입출력","date":"Apr 07, 2020","tags":["C++"],"keywords":["C","C++","Object-Oriented Programming","객체지향 프로그래밍","File io","fstream","파일 입출력","ofstream","ifstream"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/cpp12/","series":[],"lastmod":"0001-01-01"}}}